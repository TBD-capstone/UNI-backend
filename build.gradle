plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'UNI'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.2'
    implementation 'com.github.in-seo:univcert:master-SNAPSHOT'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'com.deepl.api:deepl-java:1.6.0'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:3.3.4'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jacoco {
    toolVersion = "0.8.12"
}

tasks.withType(Test) {
    useJUnitPlatform()
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

tasks.jacocoTestReport {
    dependsOn test // 테스트 실행 후 리포트 생성
    reports {
        html.required.set(true)
        xml.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/test/html"))
    }

    classDirectories.setFrom(
            files(
                    classDirectories.files.collect { dir ->
                        fileTree(dir) {
                            exclude(
                                    'uni/backend/domain/dto/**',       // DTO 클래스 제외
                                    'uni/backend/config/**',           // 설정 클래스 제외
                                    'uni/backend/domain/util/**',      // 유틸리티 클래스 제외
                                    'uni/backend/enums/**',            // 예외 클래스 제외
                                    'uni/backend/exception/**',        // 예외 클래스 제외
                                    '**/lombok/**'                     // Lombok 생성 코드 제외
                            )
                        }
                    }
            )
    )
}